{"ast":null,"code":"import React from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport Colors from \"../constants/colors\";\nimport moment from 'moment';\nimport { useGetMountainByIdQuery } from \"../common/services/mountain.service\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar HikeListTile = function HikeListTile(props) {\n  var TouchableCmp = TouchableOpacity;\n\n  if (Platform.OS === 'android' && Platform.Version >= 21) {\n    TouchableCmp = TouchableNativeFeedback;\n  }\n\n  var _useGetMountainByIdQu = useGetMountainByIdQuery(props.hike.mountainId),\n      data = _useGetMountainByIdQu.data,\n      error = _useGetMountainByIdQu.error,\n      isLoading = _useGetMountainByIdQu.isLoading,\n      isFetching = _useGetMountainByIdQu.isFetching,\n      isSuccess = _useGetMountainByIdQu.isSuccess;\n\n  var Mountain = data;\n  var dateTime = new Date(props.hike.eventTime);\n  var date = moment(dateTime).format(\"MMM Do YYYY\");\n  var time = moment(dateTime).format('LT');\n  return _jsx(View, {\n    style: styles.hikesItem,\n    children: _jsx(TouchableCmp, {\n      onPress: props.onSelect,\n      children: _jsxs(View, {\n        children: [isLoading && _jsx(Text, {\n          children: \"Loading...\"\n        }), isFetching && _jsx(Text, {\n          children: \"Fetching...\"\n        }), error && _jsx(Text, {\n          children: \"Error!\"\n        }), isSuccess && _jsxs(View, {\n          children: [_jsx(Text, {\n            style: styles.title,\n            children: Mountain.mountainName\n          }), _jsx(Text, {\n            style: styles.description,\n            children: date\n          }), _jsx(Text, {\n            style: styles.description,\n            children: time\n          })]\n        })]\n      })\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  hikesItem: {\n    flex: 1,\n    marginLeft: 15,\n    marginRight: 15,\n    marginTop: 7,\n    marginBottom: 7,\n    paddingHorizontal: 12,\n    paddingVertical: 12,\n    backgroundColor: Colors.backgroundGreen,\n    borderRadius: 5,\n    overflow: 'hidden'\n  },\n  title: {\n    fontSize: 30,\n    lineHeight: 35,\n    fontFamily: 'robotoSlab',\n    color: Colors.primaryDarkBlue\n  },\n  description: {\n    fontSize: 18,\n    fontFamily: 'openSans',\n    color: Colors.secondaryBlue\n  }\n});\nexport default HikeListTile;","map":{"version":3,"sources":["/Users/Hugo.Amorim/Desktop/hikingApp/hikingApp/frontend/components/HikeListTile.js"],"names":["React","Colors","moment","useGetMountainByIdQuery","HikeListTile","props","TouchableCmp","TouchableOpacity","Platform","OS","Version","TouchableNativeFeedback","hike","mountainId","data","error","isLoading","isFetching","isSuccess","Mountain","dateTime","Date","eventTime","date","format","time","styles","hikesItem","onSelect","title","mountainName","description","StyleSheet","create","flex","marginLeft","marginRight","marginTop","marginBottom","paddingHorizontal","paddingVertical","backgroundColor","backgroundGreen","borderRadius","overflow","fontSize","lineHeight","fontFamily","color","primaryDarkBlue","secondaryBlue"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TouchableOpacity, View, StyleSheet, Text, Platform, TouchableNativeFeedback} from 'react-native'\nimport Colors from '../constants/colors' \nimport moment from 'moment';\n// import { useAppSelector } from '../common/hooks/hooks'\nimport { useGetMountainByIdQuery } from '../common/services/mountain.service';\n\n\nconst HikeListTile = props => {\n    let TouchableCmp =  TouchableOpacity;\n  \n    if (Platform.OS === 'android' && Platform.Version >= 21 ){\n      TouchableCmp = TouchableNativeFeedback;\n    }\n\n    // convert this to rtkquery\n    // const Mountains = useAppSelector(state => state.mountainState.mountains);\n    const { data, error, isLoading, isFetching, isSuccess } = useGetMountainByIdQuery(props.hike.mountainId);\n\n    const Mountain = data;\n\n\n\n\n    // const Mountain = Mountains.find(mountain => mountain.mountainId === props.hike.mountainId)\n\n\n    var dateTime = new Date(props.hike.eventTime);\n    const date = moment(dateTime).format(\"MMM Do YYYY\");\n    const time = moment(dateTime).format('LT');\n\n    return(\n        <View \n        style={styles.hikesItem}        \n        >\n            <TouchableCmp\n            onPress={props.onSelect}\n            >\n                <View>\n                    {isLoading && <Text>Loading...</Text>}\n                    {isFetching && <Text>Fetching...</Text>}\n                    {error && <Text>Error!</Text>}\n                    {isSuccess && \n                        <View>\n                            <Text style={styles.title}>{Mountain.mountainName}</Text>\n                            <Text style={styles.description}>{date}</Text>\n                            <Text style={styles.description}>{time}</Text>  \n                        </View>\n                    }\n                </View>\n            </TouchableCmp>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    hikesItem: {\n        flex: 1,\n        marginLeft: 15,\n        marginRight: 15,\n        marginTop:7,\n        marginBottom: 7,\n        paddingHorizontal: 12,\n        paddingVertical: 12,\n        backgroundColor: Colors.backgroundGreen,\n        borderRadius: 5,\n        overflow: 'hidden'\n    },\n    title: {\n        fontSize: 30,\n        lineHeight: 35,\n        fontFamily: 'robotoSlab',\n        color: Colors.primaryDarkBlue\n    },\n    description : {\n        fontSize: 18,\n        fontFamily: 'openSans',\n        color: Colors.secondaryBlue\n        \n    }\n})\n\nexport default HikeListTile"]},"metadata":{},"sourceType":"module"}