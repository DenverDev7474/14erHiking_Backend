{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _reducer;\n\nimport { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from \"./rootReducer\";\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport { hikeApi } from \"../services/hike.service\";\nimport { mountainApi } from \"../services/mountain.service\";\nimport { routeApi } from \"../services/routes.service\";\nexport var store = configureStore({\n  reducer: (_reducer = {\n    rootReducer: rootReducer\n  }, _defineProperty(_reducer, hikeApi.reducerPath, hikeApi.reducer), _defineProperty(_reducer, mountainApi.reducerPath, mountainApi.reducer), _defineProperty(_reducer, routeApi.reducerPath, routeApi.reducer), _reducer),\n  middleware: function middleware(getDefaultMiddleware) {\n    return getDefaultMiddleware().concat(hikeApi.middleware).concat(mountainApi.middleware).concat(routeApi.middleware);\n  }\n});\nsetupListeners(store.dispatch);","map":{"version":3,"sources":["/Users/Hugo.Amorim/Desktop/hikingApp/hikingApp/frontend/common/store/store.ts"],"names":["configureStore","rootReducer","setupListeners","hikeApi","mountainApi","routeApi","store","reducer","reducerPath","middleware","getDefaultMiddleware","concat","dispatch"],"mappings":";;;;AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,WAAP;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,OAAT;AACA,SAASC,WAAT;AACA,SAASC,QAAT;AAIA,OAAO,IAAMC,KAAK,GAAGN,cAAc,CAAC;AAChCO,EAAAA,OAAO;AACHN,IAAAA,WAAW,EAAXA;AADG,+BAEFE,OAAO,CAACK,WAFN,EAEoBL,OAAO,CAACI,OAF5B,6BAGFH,WAAW,CAACI,WAHV,EAGwBJ,WAAW,CAACG,OAHpC,6BAIFF,QAAQ,CAACG,WAJP,EAIoBH,QAAQ,CAACE,OAJ7B,YADyB;AAQhCE,EAAAA,UAAU,EAAE,oBAACC,oBAAD;AAAA,WACZA,oBAAoB,GACnBC,MADD,CACQR,OAAO,CAACM,UADhB,EAECE,MAFD,CAEQP,WAAW,CAACK,UAFpB,EAGCE,MAHD,CAGQN,QAAQ,CAACI,UAHjB,CADY;AAAA;AARoB,CAAD,CAA5B;AAgBPP,cAAc,CAACI,KAAK,CAACM,QAAP,CAAd","sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\nimport { setupListeners } from '@reduxjs/toolkit/query'\nimport { hikeApi } from '../services/hike.service';\nimport { mountainApi } from '../services/mountain.service';\nimport { routeApi } from '../services/routes.service';\n\n\n\nexport const store = configureStore({\n    reducer: {\n        rootReducer,\n        [hikeApi.reducerPath]: hikeApi.reducer,\n        [mountainApi.reducerPath]: mountainApi.reducer,\n        [routeApi.reducerPath]:routeApi.reducer\n\n    },\n    middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware()\n    .concat(hikeApi.middleware)\n    .concat(mountainApi.middleware)\n    .concat(routeApi.middleware)\n});\n\n\nsetupListeners(store.dispatch)\n\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch"]},"metadata":{},"sourceType":"module"}