{"ast":null,"code":"import React from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport Colors from \"../constants/colors\";\nimport { MOUNTAINS } from \"../data/dummy-data\";\nimport moment from 'moment';\nimport { useAppSelector } from \"../common/hooks/hooks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar CalendarListTile = function CalendarListTile(_ref) {\n  var hike = _ref.hike,\n      onSelect = _ref.onSelect;\n\n  var nav = function nav(_ref2) {\n    var navigation = _ref2.navigation;\n    navigation.push('CalendarDetail', {\n      hikeId: hike.item.id\n    });\n  };\n\n  var userId = 0;\n  var availableMountain = useAppSelector(function (state) {\n    return state.mountainState.mountains;\n  });\n  var TouchableCmp = TouchableOpacity;\n\n  if (Platform.OS === 'android' && Platform.Version >= 21) {\n    TouchableCmp = TouchableNativeFeedback;\n  }\n\n  var mountain = availableMountain.find(function (item) {\n    if (item.mountainId === hike.item.mountainId) {\n      return item;\n    }\n  });\n  var dateTime = new Date(hike.item.dateTime);\n  var date = moment(dateTime).format(\"MMM Do YYYY\");\n  var time = moment(dateTime).format('LT');\n\n  var stylebackground = function stylebackground() {\n    if (userId === hike.item.hostId) {\n      return {\n        backgroundColor: Colors.backgroundGreen\n      };\n    } else {\n      return {\n        backgroundColor: Colors.backgroundBlue\n      };\n    }\n  };\n\n  return _jsx(View, {\n    style: [styles.hikesItem, stylebackground()],\n    children: _jsx(TouchableCmp, {\n      onPress: onSelect,\n      children: _jsxs(View, {\n        children: [_jsx(Text, {\n          style: styles.title,\n          children: mountain.mountainName\n        }), _jsxs(Text, {\n          style: styles.description,\n          children: [date, \" - \", time]\n        })]\n      })\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  hikesItem: {\n    flex: 1,\n    marginLeft: 10,\n    marginRight: 10,\n    marginTop: 8,\n    marginBottom: 8,\n    padding: 10,\n    height: 80,\n    borderRadius: 5,\n    overflow: 'hidden'\n  },\n  title: {\n    fontSize: 30,\n    fontFamily: 'robotoSlab',\n    color: Colors.primaryDarkBlue\n  },\n  description: {\n    fontSize: 18,\n    fontFamily: 'openSans',\n    color: Colors.secondaryBlue\n  }\n});\nexport default CalendarListTile;","map":{"version":3,"sources":["/Users/Hugo.Amorim/Desktop/hikingApp/hikingApp/frontend/components/CalendarListTile.js"],"names":["React","Colors","MOUNTAINS","moment","useAppSelector","CalendarListTile","hike","onSelect","nav","navigation","push","hikeId","item","id","userId","availableMountain","state","mountainState","mountains","TouchableCmp","TouchableOpacity","Platform","OS","Version","TouchableNativeFeedback","mountain","find","mountainId","dateTime","Date","date","format","time","stylebackground","hostId","backgroundColor","backgroundGreen","backgroundBlue","styles","hikesItem","title","mountainName","description","StyleSheet","create","flex","marginLeft","marginRight","marginTop","marginBottom","padding","height","borderRadius","overflow","fontSize","fontFamily","color","primaryDarkBlue","secondaryBlue"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TouchableOpacity, View, StyleSheet, Text, Platform, TouchableNativeFeedback} from 'react-native'\n\nimport Colors from '../constants/colors' \n\nimport { MOUNTAINS } from '../data/dummy-data'\nimport moment from 'moment';\nimport { useAppSelector } from '../common/hooks/hooks';\n\n\nconst CalendarListTile = ({hike, onSelect}) => {    \n\n    const nav = ({navigation}) => {\n        navigation.push('CalendarDetail', {\n            hikeId: hike.item.id,\n    })}\n\n    const userId = 0;\n    const availableMountain = useAppSelector(state => state.mountainState.mountains);\n\n    // find the props id and find the mountain with the same id\n\n\n    let TouchableCmp =  TouchableOpacity;\n  \n    if (Platform.OS === 'android' && Platform.Version >= 21 ){\n      TouchableCmp = TouchableNativeFeedback;\n    }\n\n\n    const mountain = availableMountain.find((item) => {\n        if(item.mountainId === hike.item.mountainId){\n            return item\n        }\n    });\n\n\n    var dateTime = new Date(hike.item.dateTime);\n    const date = moment(dateTime).format(\"MMM Do YYYY\");\n    const time = moment(dateTime).format('LT');\n\n    const stylebackground = () => {\n        if (userId === hike.item.hostId) {\n            return ( \n                    {backgroundColor: Colors.backgroundGreen}\n            )\n        } else {\n            return (\n                {backgroundColor: Colors.backgroundBlue}\n            )\n        }\n    }\n    \n    return(\n        <View style={[styles.hikesItem, stylebackground()]}>    \n            <TouchableCmp\n            onPress={onSelect} >\n                <View>\n                    <Text style={styles.title}>{mountain.mountainName}</Text>\n                    <Text style={styles.description}>{date} - {time}</Text>\n                </View>\n            </TouchableCmp>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    hikesItem: {\n        flex: 1,\n        marginLeft: 10,\n        marginRight: 10,\n        marginTop:8,\n        marginBottom: 8,\n        padding: 10,\n        height: 80,\n        borderRadius: 5,\n        overflow: 'hidden',\n    },\n    title: {\n        fontSize: 30,\n        fontFamily: 'robotoSlab',\n        color: Colors.primaryDarkBlue\n    },\n    description : {\n        fontSize: 18,\n        fontFamily: 'openSans',\n        color: Colors.secondaryBlue\n        \n    }\n})\n\nexport default CalendarListTile"]},"metadata":{},"sourceType":"module"}