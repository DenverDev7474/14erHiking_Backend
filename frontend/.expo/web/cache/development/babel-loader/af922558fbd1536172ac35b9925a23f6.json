{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport { Formik } from \"formik\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { Picker } from '@react-native-picker/picker';\nimport { useGetAllMountainsQuery } from \"../common/services/mountain.service\";\nimport { findFocusedRoute } from \"@react-navigation/native\";\nimport { useGetAllRoutesByMountainIdQuery } from \"../common/services/routes.service\";\nimport { faCommentDollar } from \"@fortawesome/free-solid-svg-icons\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport RadioButtonRN from 'radio-buttons-react-native';\nimport { useAddHikeMutation } from \"../common/services/hike.service\";\nimport Hike from \"../models/hike\";\nimport { NavigationEvents } from \"react-navigation\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function AddNewHikeForm() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      mountainId = _useState2[0],\n      setMountainId = _useState2[1];\n\n  var _useState3 = useState(new Date()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      date = _useState4[0],\n      setDate = _useState4[1];\n\n  var _useGetAllMountainsQu = useGetAllMountainsQuery(),\n      data = _useGetAllMountainsQu.data,\n      error = _useGetAllMountainsQu.error,\n      isLoading = _useGetAllMountainsQu.isLoading,\n      isFetching = _useGetAllMountainsQu.isFetching,\n      isSuccess = _useGetAllMountainsQu.isSuccess;\n\n  var _useGetAllRoutesByMou = useGetAllRoutesByMountainIdQuery(mountainId),\n      dataRoutes = _useGetAllRoutesByMou.data,\n      errorRoutes = _useGetAllRoutesByMou.error,\n      isLoadingRoutes = _useGetAllRoutesByMou.isLoading,\n      isFetchingRoutes = _useGetAllRoutesByMou.isFetching,\n      isSuccessRoutes = _useGetAllRoutesByMou.isSuccess;\n\n  var findRoute = function findRoute(mountainId) {\n    setMountainId(mountainId);\n  };\n\n  var _useAddHikeMutation = useAddHikeMutation(),\n      _useAddHikeMutation2 = _slicedToArray(_useAddHikeMutation, 1),\n      addHike = _useAddHikeMutation2[0];\n\n  var spotData = [{\n    label: '2 Spots',\n    value: 2,\n    key: '2'\n  }, {\n    label: '3 Spots',\n    value: 3,\n    key: '3'\n  }, {\n    label: '4 Spots',\n    value: 4,\n    key: '4'\n  }];\n  var gasData = [{\n    label: 'Yes',\n    value: 'Yes'\n  }, {\n    label: 'No',\n    value: 'No'\n  }];\n  var paceData = [{\n    label: 'Fast',\n    value: 'Fast'\n  }, {\n    label: 'Medium',\n    value: 'Medium'\n  }, {\n    label: 'Slow',\n    value: 'Slow'\n  }];\n  return _jsx(ScrollView, {\n    children: _jsx(Formik, {\n      initialValues: {\n        mountainId: \"\",\n        eventTime: \"\",\n        routeId: \"\",\n        hostId: \"628533c393a79f2d1e383623\",\n        spotsAvailable: 0,\n        aboutDetails: \"fogseogw\",\n        gasSplit: \"\",\n        hikePace: \"\",\n        weatherPrediction: \"TBD\",\n        createdAt: new Date().toISOString(),\n        weatherPredictionPercentage: 100\n      },\n      onSubmit: function onSubmit(values) {\n        var newHike = {\n          createdAt: values.createdAt,\n          mountainId: values.mountainId,\n          eventTime: values.eventTime,\n          routeId: values.routeId,\n          hostId: values.hostId,\n          spotsAvailable: values.spotsAvailable,\n          aboutDetails: values.aboutDetails,\n          gasSplit: values.gasSplit,\n          hikePace: values.hikePace,\n          weatherPrediction: values.weatherPrediction,\n          weatherPredictionPercentage: values.weatherPredictionPercentage,\n          attendeesIds: []\n        };\n        addHike(newHike);\n      },\n      children: function children(_ref) {\n        var handleChange = _ref.handleChange,\n            handleBlur = _ref.handleBlur,\n            handleSubmit = _ref.handleSubmit,\n            setFieldValue = _ref.setFieldValue,\n            values = _ref.values;\n        return _jsxs(View, {\n          children: [isLoading && _jsx(Text, {\n            children: \"Loading...\"\n          }), isFetching && _jsx(Text, {\n            children: \"Fetching...\"\n          }), error && _jsx(Text, {\n            children: \"Error!\"\n          }), isSuccess && _jsxs(View, {\n            children: [_jsx(Text, {\n              children: \"Select a mountain\"\n            }), _jsxs(Picker, {\n              enabled: true,\n              mode: \"dropdown\",\n              placeholder: \"Select a mountain\",\n              selectedValue: values.mountainId,\n              onValueChange: function onValueChange(itemValue, itemIndex) {\n                handleChange(\"mountainId\")(itemValue);\n                findRoute(itemValue);\n              },\n              children: [_jsx(Picker.Item, {\n                value: \"Select a Moutain\",\n                label: \"Select a Moutain\"\n              }), data.map(function (mountain) {\n                return _jsx(Picker.Item, {\n                  label: mountain.mountainName,\n                  value: mountain._id\n                }, mountain._id);\n              })]\n            }), _jsx(Text, {\n              children: \"Select a Route\"\n            }), isLoadingRoutes && _jsx(Text, {\n              children: \"Loading...\"\n            }), isFetchingRoutes && _jsx(Text, {\n              children: \"Fetching...\"\n            }), errorRoutes && _jsx(Text, {\n              children: \"Error!\"\n            }), isSuccessRoutes && _jsxs(Picker, {\n              enabled: true,\n              mode: \"dropdown\",\n              placeholder: \"Select a route\",\n              selectedValue: values.routeId,\n              onValueChange: function onValueChange(itemValue, itemIndex) {\n                handleChange(\"routeId\")(itemValue);\n              },\n              children: [_jsx(Picker.Item, {\n                value: \"Select a Route\",\n                label: \"Select a Route\"\n              }), dataRoutes.map(function (route) {\n                return _jsx(Picker.Item, {\n                  label: route.routeName,\n                  value: route._id\n                }, route._id);\n              })]\n            }), _jsx(Text, {\n              children: \"Select a Date\"\n            }), _jsx(DateTimePicker, {\n              value: date,\n              mode: \"datetime\",\n              display: \"spinner\",\n              onChange: function onChange(event, selectedDate) {\n                setDate(selectedDate);\n                setFieldValue(\"eventTime\", selectedDate.toISOString());\n              }\n            }), _jsx(Text, {\n              children: \"Available Spots\"\n            }), _jsx(RadioButtonRN, {\n              data: spotData,\n              selectedBtn: function selectedBtn(e) {\n                setFieldValue(\"spotsAvailable\", e.value);\n              }\n            }), _jsx(Text, {\n              children: \"About the Hike\"\n            }), _jsx(TextInput, {\n              onChangeText: handleChange(\"aboutDetails\"),\n              onBlur: handleBlur(\"aboutDetails\"),\n              value: values.aboutDetails\n            }), _jsx(Text, {\n              children: \"Gas Split\"\n            }), _jsx(RadioButtonRN, {\n              data: gasData,\n              selectedBtn: function selectedBtn(e) {\n                return setFieldValue(\"gasSplit\", e.value);\n              }\n            }), _jsx(Text, {\n              children: \"Hike Pace\"\n            }), _jsx(RadioButtonRN, {\n              data: paceData,\n              selectedBtn: function selectedBtn(e) {\n                setFieldValue(\"hikePace\", e.value);\n              }\n            })]\n          }), _jsx(TouchableOpacity, {\n            onPress: handleSubmit,\n            children: _jsx(Text, {\n              children: \"Submit\"\n            })\n          })]\n        });\n      }\n    })\n  });\n}","map":{"version":3,"sources":["/Users/Hugo.Amorim/Desktop/hikingApp/hikingApp/frontend/components/AddNewHikeForm.js"],"names":["React","useState","Formik","Picker","useGetAllMountainsQuery","findFocusedRoute","useGetAllRoutesByMountainIdQuery","faCommentDollar","DateTimePicker","ScrollView","RadioButtonRN","useAddHikeMutation","Hike","NavigationEvents","AddNewHikeForm","mountainId","setMountainId","Date","date","setDate","data","error","isLoading","isFetching","isSuccess","dataRoutes","errorRoutes","isLoadingRoutes","isFetchingRoutes","isSuccessRoutes","findRoute","addHike","spotData","label","value","key","gasData","paceData","eventTime","routeId","hostId","spotsAvailable","aboutDetails","gasSplit","hikePace","weatherPrediction","createdAt","toISOString","weatherPredictionPercentage","values","newHike","attendeesIds","handleChange","handleBlur","handleSubmit","setFieldValue","itemValue","itemIndex","map","mountain","mountainName","_id","route","routeName","event","selectedDate","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { View, StyleSheet, Text, TextInput, TouchableOpacity, Keyboard } from \"react-native\";\nimport {Picker} from '@react-native-picker/picker';\nimport { useGetAllMountainsQuery } from \"../common/services/mountain.service\";\nimport { findFocusedRoute } from \"@react-navigation/native\";\nimport { useGetAllRoutesByMountainIdQuery } from \"../common/services/routes.service\";\nimport { faCommentDollar } from \"@fortawesome/free-solid-svg-icons\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport RadioButtonRN from 'radio-buttons-react-native';\nimport { useAddHikeMutation } from \"../common/services/hike.service\";\nimport Hike from \"../models/hike\";\nimport { NavigationEvents } from \"react-navigation\";\n\n\n\n\nexport default function AddNewHikeForm() {\n    const [ mountainId, setMountainId ] = useState('');\n    const [date, setDate] = useState(new Date())\n\n\n    const { data, error, isLoading, isFetching, isSuccess } = useGetAllMountainsQuery();\n    \n    const { data: dataRoutes, error: errorRoutes, isLoading: isLoadingRoutes, isFetching: isFetchingRoutes, isSuccess: isSuccessRoutes } = useGetAllRoutesByMountainIdQuery(mountainId);\n\n    const findRoute = (mountainId) => {\n        setMountainId(mountainId);\n    }\n\n    const [ addHike ] = useAddHikeMutation();\n\n    const spotData = [\n        {\n            label: '2 Spots',\n            value: 2,\n            key: '2'\n        },\n        {\n            label: '3 Spots',\n            value: 3,\n            key: '3'\n\n        },\n        {\n            label: '4 Spots',\n            value: 4,\n            key: '4'\n\n        },\n    ];\n\n    const gasData = [\n        {\n            label: 'Yes',\n            value: 'Yes',\n        },\n        {\n            label: 'No',\n            value: 'No',\n        },\n    ];\n\n    const paceData = [\n        {\n            label: 'Fast',\n            value: 'Fast',\n        },\n        {\n            label: 'Medium',\n            value: 'Medium',\n        },\n        {\n            label: 'Slow',\n            value: 'Slow',\n        },\n    ];\n\n\n    return (\n        <ScrollView>\n        <Formik\n        initialValues={{\n            mountainId: \"\",\n            eventTime: \"\",\n            routeId: \"\",\n            hostId: \"628533c393a79f2d1e383623\",\n            spotsAvailable: 0,\n            aboutDetails: \"fogseogw\",\n            gasSplit: \"\",\n            hikePace: \"\",\n            weatherPrediction: \"TBD\",\n            createdAt: (new Date()).toISOString(),\n            weatherPredictionPercentage: 100\n        }}\n        onSubmit={values => {\n            const newHike = {\n                createdAt: values.createdAt,\n                mountainId: values.mountainId,\n                eventTime: values.eventTime,\n                routeId: values.routeId,\n                hostId: values.hostId,\n                spotsAvailable: values.spotsAvailable,\n                aboutDetails: values.aboutDetails,\n                gasSplit: values.gasSplit,\n                hikePace: values.hikePace,\n                weatherPrediction: values.weatherPrediction,\n                weatherPredictionPercentage: values.weatherPredictionPercentage,\n                attendeesIds: []\n            }\n            addHike(newHike);\n            // navigate back to previous screen \n        }}\n        >\n        {({ handleChange, handleBlur, handleSubmit, setFieldValue, values }) => (\n            <View>\n            \n            {isLoading && <Text>Loading...</Text>}\n                    {isFetching && <Text>Fetching...</Text>}\n                    {error && <Text>Error!</Text>}\n                    {isSuccess &&\n                <View>\n                    <Text>Select a mountain</Text>\n                    <Picker\n                        enabled={true}\n                        mode=\"dropdown\"\n                        placeholder=\"Select a mountain\"\n                        //  onValueChange={formik.handleChange('mountainName')}\n                        selectedValue={values.mountainId}\n                        onValueChange={(itemValue, itemIndex) => {\n                            handleChange(\"mountainId\")(itemValue)\n                            findRoute(itemValue)\n                        }}\n                    >\n                        <Picker.Item value=\"Select a Moutain\" label=\"Select a Moutain\" />\n                        {data.map(mountain => {\n                            return (\n                                <Picker.Item label={mountain.mountainName}\n                                    value={mountain._id} \n                                    key= {mountain._id}\n                                />\n                            )\n                        })}\n                    </Picker>  \n                    <Text>Select a Route</Text>\n                    {isLoadingRoutes && <Text>Loading...</Text>}\n                    {isFetchingRoutes && <Text>Fetching...</Text>}\n                    {errorRoutes && <Text>Error!</Text>}\n                    {isSuccessRoutes &&\n                    <Picker \n                        enabled={true}\n                        mode=\"dropdown\"\n                        placeholder=\"Select a route\"\n                        selectedValue={values.routeId}\n                        onValueChange={(itemValue, itemIndex) => {\n                            handleChange(\"routeId\")(itemValue)\n                        }}\n                    >\n                        <Picker.Item value=\"Select a Route\" label=\"Select a Route\" />   \n                        {dataRoutes.map(route => {  \n                            return (\n                                <Picker.Item label={route.routeName}\n                                    value={route._id}\n                                    key= {route._id}\n                                />\n                            )\n                        })}\n                    </Picker>\n    }\n                    <Text>Select a Date</Text>\n                    <DateTimePicker \n                        value={date} mode={\"datetime\"} \n                        display={\"spinner\"}\n                        onChange={(event, selectedDate) => {\n                            setDate(selectedDate)\n                            setFieldValue(\"eventTime\", selectedDate.toISOString())\n                        }}\n\n                    />\n                    <Text>Available Spots</Text>\n                    <RadioButtonRN \n                        data={spotData}\n                        selectedBtn={(e) => {\n                            setFieldValue(\"spotsAvailable\", e.value)\n                        }}\n                    />\n                    <Text>About the Hike</Text>\n                    <TextInput\n                        onChangeText={handleChange(\"aboutDetails\")}\n                        onBlur={handleBlur(\"aboutDetails\")}\n                        value={values.aboutDetails} \n                    />\n                    <Text>Gas Split</Text>\n                    <RadioButtonRN \n                        data={gasData}   \n                        selectedBtn={(e) => \n                            setFieldValue(\"gasSplit\", e.value) \n                        }\n                    />\n                    <Text>Hike Pace</Text>\n                    <RadioButtonRN\n                        data={paceData}\n                        selectedBtn={(e) => {\n                            setFieldValue(\"hikePace\", e.value)\n                        }}\n                    />\n                </View>\n            }\n            <TouchableOpacity onPress={handleSubmit}>\n                <Text>Submit</Text>\n            </TouchableOpacity>\n            </View>\n        )}\n        </Formik>\n        </ScrollView>\n    );\n\n}"]},"metadata":{},"sourceType":"module"}