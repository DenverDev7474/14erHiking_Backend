{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/Hugo.Amorim/Desktop/hikingApp/hikingApp/App.js\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Font from 'expo-font';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport HikeNavigator from \"./navigator/HikeNavigator\";\nimport hikesReducer from \"./store/reducers/hikes\";\nimport mountainsReducer from \"./store/reducers/mountains\";\nvar rootReducer = combineReducers({\n  hikes: hikesReducer,\n  mountains: mountainsReducer\n});\nvar store = createStore(rootReducer);\n\nvar fetchFonts = function fetchFonts() {\n  return _regeneratorRuntime.async(function fetchFonts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Font.loadAsync({\n            openSans: require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n            openSansBold: require(\"./assets/fonts/OpenSans-Bold.ttf\"),\n            robotoSlab: require(\"./assets/fonts/RobotoSlab-Bold.ttf\"),\n            robotoSlabLight: require(\"./assets/fonts/RobotoSlab-Light.ttf\")\n          }));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fontLoaded = _useState2[0],\n      setFontLoaded = _useState2[1];\n\n  if (!fontLoaded) {\n    return {};\n  }\n\n  return React.createElement(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, React.createElement(HikeNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/Users/Hugo.Amorim/Desktop/hikingApp/hikingApp/App.js"],"names":["React","useState","Font","createStore","combineReducers","Provider","HikeNavigator","hikesReducer","mountainsReducer","rootReducer","hikes","mountains","store","fetchFonts","loadAsync","openSans","require","openSansBold","robotoSlab","robotoSlabLight","App","fontLoaded","setFontLoaded","styles","container","StyleSheet","create","flex"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAiC,OAAjC;;;;AAEA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAKA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAOC,aAAP;AACA,OAAOC,YAAP;AACA,OAAOC,gBAAP;AAGA,IAAMC,WAAW,GAAGL,eAAe,CAAC;AAClCM,EAAAA,KAAK,EAAEH,YAD2B;AAElCI,EAAAA,SAAS,EAAEH;AAFuB,CAAD,CAAnC;AAKA,IAAMI,KAAK,GAAGT,WAAW,CAACM,WAAD,CAAzB;;AAEA,IAAMI,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACXX,IAAI,CAACY,SAAL,CAAe;AACnBC,YAAAA,QAAQ,EAAEC,OAAO,uCADE;AAEnBC,YAAAA,YAAY,EAAED,OAAO,oCAFF;AAGnBE,YAAAA,UAAU,EAAEF,OAAO,sCAHA;AAInBG,YAAAA,eAAe,EAAEH,OAAO;AAJL,WAAf,CADW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAUA,eAAe,SAASI,GAAT,GAAe;AAC5B,kBAAoCnB,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOoB,UAAP;AAAA,MAAmBC,aAAnB;;AAGA,MAAI,CAACD,UAAL,EAAgB;AACd,WACI,EADJ;AAMD;;AAED,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAET,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEW,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAQC;AAEH,IAAMD,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import React, { useState }  from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport * as Font from 'expo-font';\n//import AppLoading from 'expo-app-loading';\n\n//import HikeListScreen from './screens/HikeListScreen';\n//import Header from './components/Header';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport HikeNavigator from './navigator/HikeNavigator';\nimport hikesReducer from './store/reducers/hikes';\nimport mountainsReducer from './store/reducers/mountains';\n\n\nconst rootReducer = combineReducers({\n  hikes: hikesReducer,\n  mountains: mountainsReducer,\n})\n\nconst store = createStore(rootReducer);\n\nconst fetchFonts = async () => {\n  await Font.loadAsync({\n    openSans: require('./assets/fonts/OpenSans-Regular.ttf'),\n    openSansBold: require('./assets/fonts/OpenSans-Bold.ttf'),\n    robotoSlab: require('./assets/fonts/RobotoSlab-Bold.ttf'),\n    robotoSlabLight: require('./assets/fonts/RobotoSlab-Light.ttf'),\n  });\n};\n\n\nexport default function App() {\n  const [fontLoaded, setFontLoaded] = useState(false)\n\n\n  if (!fontLoaded){\n    return (\n        {/* <AppLoading\n          startAsync={fetchFonts}\n          onFinish={() => setFontLoaded(true)}\n        /> */}\n    )\n  }\n   \n  return (\n    <Provider store={store}>\n      <View style={styles.container}>\n        <HikeNavigator />\n      </View>\n    </Provider>\n  )\n\n  }\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n   \n  },\n});\n"]},"metadata":{},"sourceType":"module"}