{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HIKES } from \"../../data/dummy-data\";\nimport { TOGGLE_SAVED } from \"../actions/hikes\";\nvar initialState = {\n  hikesAvailble: HIKES,\n  hikesScheduled: [],\n  hikesSaved: [],\n  hikesFiltered: HIKES\n};\n\nvar hikesReducer = function hikesReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TOGGLE_SAVED:\n      var existingIndex = state.hikesSaved.findIndex(function (hike) {\n        return hike.id === action.hikeID;\n      });\n\n      if (existingIndex >= 0) {\n        var updatedHikeSaved = _toConsumableArray(state.hikesSaved);\n\n        updatedHikeSaved.splice(existingIndex, 1);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          hikesSaved: updatedHikeSaved\n        });\n      } else {\n        var hike = state.hikesAvailble.find(function (hike) {\n          return hike.id === action.hikeId;\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          hikesSaved: state.hikesSaved\n        }).concat(hike);\n      }\n\n  }\n\n  return state;\n};\n\nexport default hikesReducer;","map":{"version":3,"sources":["/Users/Hugo.Amorim/Desktop/hikingApp/hikingApp/store/reducers/hikes.js"],"names":["HIKES","TOGGLE_SAVED","initialState","hikesAvailble","hikesScheduled","hikesSaved","hikesFiltered","hikesReducer","state","action","type","existingIndex","findIndex","hike","id","hikeID","updatedHikeSaved","splice","find","hikeId","concat"],"mappings":";;;;;;;AAAA,SAASA,KAAT;AACA,SAASC,YAAT;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,aAAa,EAAEH,KADE;AAEjBI,EAAAA,cAAc,EAAE,EAFC;AAGjBC,EAAAA,UAAU,EAAE,EAHK;AAIjBC,EAAAA,aAAa,EAAEN;AAJE,CAArB;;AAQA,IAAMO,YAAY,GAAG,SAAfA,YAAe,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,YAAL;AACI,UAAMU,aAAa,GAAGH,KAAK,CAACH,UAAN,CAAiBO,SAAjB,CAA4B,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACM,MAAvB;AAAA,OAAhC,CAAtB;;AACA,UAAIJ,aAAa,IAAI,CAArB,EAAwB;AACpB,YAAMK,gBAAgB,sBAAOR,KAAK,CAACH,UAAb,CAAtB;;AACAW,QAAAA,gBAAgB,CAACC,MAAjB,CAAwBN,aAAxB,EAAuC,CAAvC;AACA,+CAAYH,KAAZ;AAAmBH,UAAAA,UAAU,EAAEW;AAA/B;AACH,OAJD,MAIO;AACH,YAAMH,IAAI,GAAGL,KAAK,CAACL,aAAN,CAAoBe,IAApB,CAAyB,UAAAL,IAAI;AAAA,iBAAIA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACU,MAAvB;AAAA,SAA7B,CAAb;AACA,eAAO,gCAAIX,KAAJ;AAAWH,UAAAA,UAAU,EAAEG,KAAK,CAACH;AAA7B,WAAyCe,MAAzC,CAAgDP,IAAhD,CAAP;AAA6D;;AATzE;;AAeC,SAAOL,KAAP;AACJ,CAjBD;;AAmBA,eAAeD,YAAf","sourcesContent":["import { HIKES } from '../../data/dummy-data'\nimport { TOGGLE_SAVED } from '../actions/hikes'\n\nconst initialState = {\n    hikesAvailble: HIKES,\n    hikesScheduled: [],\n    hikesSaved: [],\n    hikesFiltered: HIKES,\n}\n\n\nconst hikesReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case TOGGLE_SAVED:\n            const existingIndex = state.hikesSaved.findIndex( hike => hike.id === action.hikeID) ;\n            if( existingIndex >= 0 ){\n                const updatedHikeSaved = [...state.hikesSaved];\n                updatedHikeSaved.splice(existingIndex, 1);\n                return { ...state, hikesSaved: updatedHikeSaved}\n            } else {\n                const hike = state.hikesAvailble.find(hike => hike.id === action.hikeId)\n                return {...state, hikesSaved: state.hikesSaved}.concat(hike)}\n            }\n    //     default:\n    //         return state;\n\n    // }\n     return state;\n}\n\nexport default hikesReducer;"]},"metadata":{},"sourceType":"module"}