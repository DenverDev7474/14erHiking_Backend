{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport routeSlice from \"../../common/slice/routeSlice\";\nimport { useAppSelector } from \"../../common/hooks/hooks\";\nimport { FlatList } from 'react-native-gesture-handler';\nimport ListCard from \"../../components/ListCard\";\nimport Colors from \"../../constants/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar InfoMountainDetailScreen = function InfoMountainDetailScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var mountainId = route.params.mountainId;\n  var mountains = useAppSelector(function (state) {\n    return state.mountainState.mountains;\n  });\n  var routes = useAppSelector(function (state) {\n    return state.routeState.routes;\n  });\n  var mountain = mountains.find(function (mountain) {\n    return mountain.mountainId === mountainId;\n  });\n  var routeList = routes.filter(function (route) {\n    return route.mountainId === mountainId;\n  });\n  var lowestRouteDistance = routeList.reduce(function (lowest, route) {\n    return route.routeDistance < lowest ? route.routeDistance : lowest;\n  }, routeList[0].routeDistance);\n  var highestRouteDistance = routeList.reduce(function (highest, route) {\n    return route.routeDistance > highest ? route.routeDistance : highest;\n  }, routeList[0].routeDistance);\n  return _jsx(View, {\n    style: styles.screen,\n    children: _jsxs(View, {\n      style: styles.rangeContainer,\n      children: [_jsx(Text, {\n        style: styles.rangeTitle,\n        children: mountain.mountainName\n      }), _jsxs(Text, {\n        children: [\"Mileage:\", lowestRouteDistance, \" to \", highestRouteDistance]\n      }), _jsxs(Text, {\n        children: [\"Elevation: \", mountain.elevation]\n      }), _jsx(Text, {\n        children: \"Trailhead:\"\n      }), _jsx(FlatList, {\n        data: routeList,\n        renderItem: function renderItem(_ref2) {\n          var item = _ref2.item;\n          return _jsx(ListCard, {\n            route: item,\n            maxWidth: '100%',\n            color: Colors.backgroundGreen,\n            children: _jsxs(Text, {\n              style: styles.title,\n              children: [item.routeName, \": Class \", item.routeDifficulty]\n            })\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.routeId;\n        }\n      })]\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  Screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  rangeContainer: {\n    marginHorizontal: 20,\n    marginTop: 20\n  },\n  title: {\n    fontSize: 18,\n    lineHeight: 20,\n    fontFamily: 'robotoSlab',\n    color: Colors.primaryDarkBlue\n  },\n  rangeTitle: {\n    color: Colors.secondaryGreen,\n    fontFamily: 'robotoSlab',\n    fontSize: 20,\n    fontWeight: 'bold'\n  }\n});\nexport default InfoMountainDetailScreen;","map":{"version":3,"sources":["/Users/Hugo.Amorim/Desktop/hikingApp/hikingApp/frontend/screens/Info/InfoMountainDetailScreen.js"],"names":["React","routeSlice","useAppSelector","FlatList","ListCard","Colors","InfoMountainDetailScreen","route","navigation","mountainId","params","mountains","state","mountainState","routes","routeState","mountain","find","routeList","filter","lowestRouteDistance","reduce","lowest","routeDistance","highestRouteDistance","highest","styles","screen","rangeContainer","rangeTitle","mountainName","elevation","item","backgroundGreen","title","routeName","routeDifficulty","routeId","StyleSheet","create","Screen","flex","justifyContent","alignItems","marginHorizontal","marginTop","fontSize","lineHeight","fontFamily","color","primaryDarkBlue","secondaryGreen","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native'\nimport routeSlice from '../../common/slice/routeSlice';\nimport { useAppSelector } from '../../common/hooks/hooks';\nimport { FlatList } from 'react-native-gesture-handler';\nimport ListCard from '../../components/ListCard';\nimport Colors from '../../constants/colors';\n\n\n\nconst InfoMountainDetailScreen = ({route, navigation}) => {\n\n\n    const mountainId = route.params.mountainId;\n    const mountains = useAppSelector((state) => state.mountainState.mountains);\n    const routes = useAppSelector((state) => state.routeState.routes);\n\n    const mountain = mountains.find((mountain) => mountain.mountainId === mountainId);\n    const routeList = routes.filter((route) => route.mountainId === mountainId);\n\n    // get the lowest and highest routeDistance fro the routelist\n    const lowestRouteDistance = routeList.reduce((lowest, route) => {\n        return route.routeDistance < lowest ? route.routeDistance : lowest;\n    }   , routeList[0].routeDistance);  \n    const highestRouteDistance = routeList.reduce((highest, route) => {\n        return route.routeDistance > highest ? route.routeDistance : highest;\n    }   , routeList[0].routeDistance);\n\n\n    return (    \n        <View style={styles.screen}>\n            <View style={styles.rangeContainer}>\n                <Text style={styles.rangeTitle}>{mountain.mountainName}</Text>\n                <Text>Mileage:{lowestRouteDistance} to {highestRouteDistance}</Text>\n                <Text>Elevation: {mountain.elevation}</Text>\n                <Text>Trailhead:</Text>\n                <FlatList   \n                    data= {routeList}\n                    renderItem={({item}) => {\n                        return (\n                            <ListCard route={item} maxWidth={'100%'} color={Colors.backgroundGreen}>\n                                <Text style={styles.title}>{item.routeName}: Class {item.routeDifficulty}</Text>\n                            </ListCard> \n                        );\n                    }\n                }   \n                    keyExtractor={item => item.routeId}\n                />\n\n            </View>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    Screen: {\n        flex: 1, \n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    rangeContainer: {\n        marginHorizontal: 20,\n        marginTop: 20,\n    },\n    title: {\n        fontSize: 18,\n        lineHeight: 20,\n        fontFamily: 'robotoSlab',\n        color: Colors.primaryDarkBlue\n    },\n    rangeTitle: {\n        color: Colors.secondaryGreen,\n        fontFamily: 'robotoSlab',\n        fontSize: 20,\n        fontWeight: 'bold',\n}\n\n});\n\nexport default  InfoMountainDetailScreen;"]},"metadata":{},"sourceType":"module"}