{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { useAppSelector } from \"../../common/hooks/hooks\";\nimport Colors from \"../../constants/colors\";\nimport HikeListTile from \"../../components/HikeListTile\";\nimport { useGetHikesQuery } from \"../../common/services/hike.service\";\nimport { useFocusEffect } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar HikeListScreen = function HikeListScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useGetHikesQuery = useGetHikesQuery(),\n      data = _useGetHikesQuery.data,\n      error = _useGetHikesQuery.error,\n      isLoading = _useGetHikesQuery.isLoading,\n      isFetching = _useGetHikesQuery.isFetching,\n      isSuccess = _useGetHikesQuery.isSuccess;\n\n  useFocusEffect(React.useCallback(function () {\n    console.log('test');\n  }, []));\n  var availableHikes = data;\n\n  var renderItem = function renderItem(itemData) {\n    return _jsx(HikeListTile, {\n      hike: itemData.item,\n      onSelect: function onSelect(props) {\n        navigation.navigate(\"DetailHike\", {\n          hikeId: itemData.item._id\n        });\n      }\n    });\n  };\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [isLoading && _jsx(Text, {\n      children: \"Loading...\"\n    }), isFetching && _jsx(Text, {\n      children: \"Fetching...\"\n    }), error && _jsx(Text, {\n      children: \"Error!\"\n    }), isSuccess && _jsx(FlatList, {\n      data: availableHikes,\n      renderItem: renderItem\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  Screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default HikeListScreen;","map":{"version":3,"sources":["/Users/Hugo.Amorim/Desktop/hikingApp/hikingApp/frontend/screens/Hike/HikeListScreen.js"],"names":["React","useAppSelector","Colors","HikeListTile","useGetHikesQuery","useFocusEffect","HikeListScreen","navigation","data","error","isLoading","isFetching","isSuccess","useCallback","console","log","availableHikes","renderItem","itemData","item","props","navigate","hikeId","_id","styles","screen","StyleSheet","create","Screen","flex","justifyContent","alignItems"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAEA,SAASC,cAAT;AAEA,OAAOC,MAAP;AACA,OAAOC,YAAP;AACA,SAASC,gBAAT;AACA,SAASC,cAAT,QAA+B,0BAA/B;;;;AAIA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AACvC,0BAA0DH,gBAAgB,EAA1E;AAAA,MAAQI,IAAR,qBAAQA,IAAR;AAAA,MAAcC,KAAd,qBAAcA,KAAd;AAAA,MAAqBC,SAArB,qBAAqBA,SAArB;AAAA,MAAgCC,UAAhC,qBAAgCA,UAAhC;AAAA,MAA4CC,SAA5C,qBAA4CA,SAA5C;;AAEAP,EAAAA,cAAc,CACVL,KAAK,CAACa,WAAN,CAAkB,YAAM;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,GAFD,EAEG,EAFH,CADU,CAAd;AAMA,MAAMC,cAAc,GAAGR,IAAvB;;AAEA,MAAMS,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAc;AAC7B,WACI,KAAC,YAAD;AAAc,MAAA,IAAI,EAAEA,QAAQ,CAACC,IAA7B;AAAmC,MAAA,QAAQ,EAAE,kBAACC,KAAD,EAAW;AACpDb,QAAAA,UAAU,CAACc,QAAX,CAAoB,YAApB,EAAkC;AAC9BC,UAAAA,MAAM,EAAEJ,QAAQ,CAACC,IAAT,CAAcI;AADQ,SAAlC;AAGH;AAJD,MADJ;AAOH,GARD;;AAUA,SACY,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,MAApB;AAAA,eACKf,SAAS,IAAI,KAAC,IAAD;AAAA;AAAA,MADlB,EAEKC,UAAU,IAAI,KAAC,IAAD;AAAA;AAAA,MAFnB,EAGKF,KAAK,IAAI,KAAC,IAAD;AAAA;AAAA,MAHd,EAIKG,SAAS,IACN,KAAC,QAAD;AACA,MAAA,IAAI,EAAGI,cADP;AAEA,MAAA,UAAU,EAAEC;AAFZ,MALR;AAAA,IADZ;AAcH,CAnCD;;AAqCA,IAAMO,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC7BC,EAAAA,MAAM,EAAE;AACJC,IAAAA,IAAI,EAAE,CADF;AAEJC,IAAAA,cAAc,EAAE,QAFZ;AAGJC,IAAAA,UAAU,EAAE;AAHR;AADqB,CAAlB,CAAf;AAQA,eAAgBzB,cAAhB","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, FlatList, Text } from 'react-native'\nimport { useAppSelector } from '../../common/hooks/hooks'\n\nimport Colors from '../../constants/colors'\nimport HikeListTile from '../../components/HikeListTile'\nimport { useGetHikesQuery } from '../../common/services/hike.service';\nimport { useFocusEffect } from '@react-navigation/native';\n\n\n\nconst HikeListScreen = ({ navigation }) => {\n    const { data, error, isLoading, isFetching, isSuccess } = useGetHikesQuery()\n \n    useFocusEffect(\n        React.useCallback(() => {\n            console.log('test');\n        }, [])\n      );\n\n    const availableHikes = data\n\n    const renderItem = (itemData) => {\n        return (\n            <HikeListTile hike={itemData.item} onSelect={(props) => {\n                navigation.navigate(\"DetailHike\", {\n                    hikeId: itemData.item._id\n                })\n            }}/>\n        );\n    }\n\n    return (\n                <View style={styles.screen}>\n                    {isLoading && <Text>Loading...</Text>}\n                    {isFetching && <Text>Fetching...</Text>}\n                    {error && <Text>Error!</Text>}\n                    {isSuccess &&\n                        <FlatList \n                        data= {availableHikes}\n                        renderItem={renderItem}\n                    />\n                    }\n                 \n                </View>   \n            );\n};\n\nconst styles = StyleSheet.create({\n    Screen: {\n        flex: 1, \n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n});\n\nexport default  HikeListScreen;"]},"metadata":{},"sourceType":"module"}