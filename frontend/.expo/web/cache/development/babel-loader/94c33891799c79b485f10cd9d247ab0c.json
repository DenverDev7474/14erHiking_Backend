{"ast":null,"code":"import { Reanimated } from \"./reanimatedWrapper\";\nimport { State } from \"../../State\";\nexport var GestureStateManager = {\n  create: function () {\n    var _f = function _f(handlerTag) {\n      return {\n        begin: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.BEGAN);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              BEGAN: State.BEGAN\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 8149384316327;\n          _f.__location = \"/Users/Hugo.Amorim/Desktop/hikingApp/hikingApp/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (8:13)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }(),\n        activate: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.ACTIVE);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              ACTIVE: State.ACTIVE\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 1117524627396;\n          _f.__location = \"/Users/Hugo.Amorim/Desktop/hikingApp/hikingApp/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (17:16)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }(),\n        fail: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.FAILED);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              FAILED: State.FAILED\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 16579675743275;\n          _f.__location = \"/Users/Hugo.Amorim/Desktop/hikingApp/hikingApp/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (26:12)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }(),\n        end: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.END);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              END: State.END\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 13760866678247;\n          _f.__location = \"/Users/Hugo.Amorim/Desktop/hikingApp/hikingApp/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (35:11)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }()\n      };\n    };\n\n    _f._closure = {\n      Reanimated: Reanimated,\n      State: {\n        BEGAN: State.BEGAN,\n        ACTIVE: State.ACTIVE,\n        FAILED: State.FAILED,\n        END: State.END\n      }\n    };\n    _f.asString = \"function create(handlerTag){const{Reanimated,State}=jsThis._closure;{return{begin:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}},activate:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}},fail:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}},end:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}};}}\";\n    _f.__workletHash = 5319495435492;\n    _f.__location = \"/Users/Hugo.Amorim/Desktop/hikingApp/hikingApp/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }()\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAT;AACA,SAASC,KAAT;AASA,OAAO,IAAMC,mBAAmB,GAAG;AACjCC,QADiC;AAAA,yBAC1BC,UAD0B,EACmB;AAElD,aAAO;AACLC,aAAK;AAAA,iCAAQ;AAEX,gBAAIL,UAAJ,EAAgB;AACdA,wBAAU,CAACM,eAAXN,CAA2BI,UAA3BJ,EAAuCC,KAAK,CAACM,KAA7CP;AADF,mBAEO;AACLQ,qBAAO,CAACC,IAARD,CACE,kFADFA;AAGD;AATE,WACA;;AAAA;AAAA,wBAJXR,UAIW;AAAA,wBAH2CI,UAG3C;AAAA;AAAA,qBAH2CH;AAG3C;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,WADA;AAYLS,gBAAQ;AAAA,iCAAQ;AAEd,gBAAIV,UAAJ,EAAgB;AACdA,wBAAU,CAACM,eAAXN,CAA2BI,UAA3BJ,EAAuCC,KAAK,CAACU,MAA7CX;AADF,mBAEO;AACLQ,qBAAO,CAACC,IAARD,CACE,kFADFA;AAGD;AApBE,WAYG;;AAAA;AAAA,wBAfdR,UAec;AAAA,wBAdwCI,UAcxC;AAAA;AAAA,sBAdwCH;AAcxC;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,WAZH;AAuBLW,YAAI;AAAA,iCAAQ;AAEV,gBAAIZ,UAAJ,EAAgB;AACdA,wBAAU,CAACM,eAAXN,CAA2BI,UAA3BJ,EAAuCC,KAAK,CAACY,MAA7Cb;AADF,mBAEO;AACLQ,qBAAO,CAACC,IAARD,CACE,kFADFA;AAGD;AA/BE,WAuBD;;AAAA;AAAA,wBA1BVR,UA0BU;AAAA,wBAzB4CI,UAyB5C;AAAA;AAAA,sBAzB4CH;AAyB5C;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,WAvBC;AAkCLa,WAAG;AAAA,iCAAQ;AAET,gBAAId,UAAJ,EAAgB;AACdA,wBAAU,CAACM,eAAXN,CAA2BI,UAA3BJ,EAAuCC,KAAK,CAACc,GAA7Cf;AADF,mBAEO;AACLQ,qBAAO,CAACC,IAARD,CACE,kFADFA;AAGD;AACF,WATE;;AAAA;AAAA,wBArCTR,UAqCS;AAAA,wBApC6CI,UAoC7C;AAAA;AAAA,mBApC6CH;AAoC7C;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAlCE,OAAP;AA6CD,KAhDgC;;AAAA;AAAA,kBAGxBD,UAHwB;AAAA;AAAA,eAIhBC,WAJgB;AAAA,gBAebA,YAfa;AAAA,gBA0BjBA,YA1BiB;AAAA,aAqClBA;AArCkB;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,CAA5B","names":["Reanimated","State","GestureStateManager","create","handlerTag","begin","setGestureState","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END"],"sources":["gestureStateManager.ts"],"sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}