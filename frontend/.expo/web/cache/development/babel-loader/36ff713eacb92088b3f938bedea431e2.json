{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport HikeNavigator from \"./navigator/HikeNavigator\";\nimport CalendarNavigator from \"./navigator/CalendarNavigator\";\nimport InfoNavigator from \"./navigator/InfoNavigator\";\nimport { Provider } from 'react-redux';\nimport { store } from \"./common/store/store\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Font from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport TabNavigator from \"./navigator/TabNavigator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Tab = createMaterialBottomTabNavigator();\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fontLoaded = _useState2[0],\n      setFontLoaded = _useState2[1];\n\n  var fetchFonts = function fetchFonts() {\n    return _regeneratorRuntime.async(function fetchFonts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Font.loadAsync({\n              openSans: require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n              openSansBold: require(\"./assets/fonts/OpenSans-Bold.ttf\"),\n              robotoSlab: require(\"./assets/fonts/RobotoSlab-Bold.ttf\"),\n              robotoSlabLight: require(\"./assets/fonts/RobotoSlab-Light.ttf\")\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!fontLoaded) {\n    return _jsx(AppLoading, {\n      startAsync: fetchFonts,\n      onFinish: function onFinish() {\n        return setFontLoaded(true);\n      },\n      onError: console.warn\n    });\n  }\n\n  return _jsx(Provider, {\n    store: store,\n    children: _jsx(NavigationContainer, {\n      children: _jsx(TabNavigator, {})\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/Users/Hugo.Amorim/Desktop/hikingApp/hikingApp/frontend/App.js"],"names":["React","useState","NavigationContainer","createMaterialBottomTabNavigator","HikeNavigator","CalendarNavigator","InfoNavigator","Provider","store","Font","AppLoading","TabNavigator","Tab","App","fontLoaded","setFontLoaded","fetchFonts","loadAsync","openSans","require","openSansBold","robotoSlab","robotoSlabLight","console","warn","styles","StyleSheet","create","container","flex"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,gCAAT,QAAiD,wCAAjD;AACA,OAAOC,aAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,aAAP;AAGA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,KAAT;;;;AAEA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP;;AAIA,IAAMC,GAAG,GAAGT,gCAAgC,EAA5C;AAEA,eAAe,SAASU,GAAT,GAAe;AAG5B,kBAAoCZ,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOa,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACXP,IAAI,CAACQ,SAAL,CAAe;AACnBC,cAAAA,QAAQ,EAAEC,OAAO,uCADE;AAEnBC,cAAAA,YAAY,EAAED,OAAO,oCAFF;AAGnBE,cAAAA,UAAU,EAAEF,OAAO,sCAHA;AAInBG,cAAAA,eAAe,EAAEH,OAAO;AAJL,aAAf,CADW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAUA,MAAI,CAACL,UAAL,EAAgB;AAChB,WACM,KAAC,UAAD;AACE,MAAA,UAAU,EAAEE,UADd;AAEE,MAAA,QAAQ,EAAE;AAAA,eAAMD,aAAa,CAAC,IAAD,CAAnB;AAAA,OAFZ;AAGE,MAAA,OAAO,EAAEQ,OAAO,CAACC;AAHnB,MADN;AAOC;;AAID,SACI,KAAC,QAAD;AAAU,IAAA,KAAK,EAAEhB,KAAjB;AAAA,cACE,KAAC,mBAAD;AAAA,gBACE,KAAC,YAAD;AADF;AADF,IADJ;AAOD;AAGD,IAAMiB,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport HikeNavigator from './navigator/HikeNavigator'\nimport CalendarNavigator from './navigator/CalendarNavigator'\nimport InfoNavigator from './navigator/InfoNavigator'\n\n\nimport { Provider } from 'react-redux'\nimport { store } from './common/store/store'\nimport { StyleSheet, Text, View } from 'react-native'; \nimport * as Font from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport TabNavigator from './navigator/TabNavigator';\n\n\n\nconst Tab = createMaterialBottomTabNavigator();\n\nexport default function App() {\n\n\n  const [fontLoaded, setFontLoaded] = useState(false)\n\n  const fetchFonts = async () => {\n    await Font.loadAsync({\n      openSans: require('./assets/fonts/OpenSans-Regular.ttf'),\n      openSansBold: require('./assets/fonts/OpenSans-Bold.ttf'),\n      robotoSlab: require('./assets/fonts/RobotoSlab-Bold.ttf'),\n      robotoSlabLight: require('./assets/fonts/RobotoSlab-Light.ttf'),\n    });\n  };\n\n\n  if (!fontLoaded){\n  return (\n        <AppLoading\n          startAsync={fetchFonts}\n          onFinish={() => setFontLoaded(true)}\n          onError={console.warn}\n        /> \n    );\n  }\n       \n\n\n  return (\n      <Provider store={store}>\n        <NavigationContainer>\n          <TabNavigator />\n        </NavigationContainer>\n      </Provider>\n  );\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});"]},"metadata":{},"sourceType":"module"}